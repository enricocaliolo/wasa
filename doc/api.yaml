openapi: 3.0.0
info:
  title: WasaText
  description: |
    This API allows users to get and send messages.
  version: 0.0.1
tags:
  - name: auth
    description: Authentication endpoints
  - name: users
    description: User management endpoints
  - name: conversations
    description: Conversation and messaging endpoints
  - name: messages
    description: Message management endpoints
paths:
  /session:
    put:
      tags: ["auth"]
      summary: Logs in the user
      operationId: login
      description: If the user does not exist, it will be created. If the user exists, the user information is returned.
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "Maria"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200":
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /test-users:
    get:
      tags: ["users"]
      summary: Get all test users
      operationId: TestUsers
      description: Returns a list of all users in the system
      responses:
        "200":
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/search:
    get:
      tags: ["users"]
      summary: Find user by username
      operationId: findUser
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

  /settings/profile/username:
    put:
      tags: ["users"]
      summary: Update username
      operationId: changeUsername
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 64
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "409":
          description: Username already taken

  /settings/profile/icon:
    put:
      tags: ["users"]
      summary: Update user photo
      operationId: changePhoto
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Photo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "409":
          description: Photo update failed

  /conversations:
    get:
      tags: ["conversations"]
      summary: Get user conversations
      operationId: conversations
      description: Get all conversations for the authenticated user
      responses:
        "200":
          description: Successfully retrieved conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Conversation"
    
    post:
      tags: ["conversations"]
      summary: Create new conversation
      operationId: createConversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: integer
                  minItems: 1
                name:
                  type: string
      responses:
        "201":
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"

  /conversations/{conversation_id}:
    parameters:
      - $ref: "#/components/parameters/conversation_id"
    get:
      tags: ["messages"]
      summary: Get conversation messages
      operationId: getConversation
      responses:
        "200":
          description: Successfully retrieved messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
    
    post:
      tags: ["messages"]
      summary: Send new message
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                content_type:
                  type: string
                  enum: [text, image]
                replied_to:
                  type: integer
                is_forwarded:
                  type: boolean
                destination_conversation_id:
                  type: integer
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    
    delete:
      tags: ["conversations"]
      summary: Leave conversation/group
      operationId: deleteConversation
      responses:
        "202":
          description: Successfully left conversation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /conversations/{conversation_id}/messages/{message_id}:
    parameters:
      - $ref: "#/components/parameters/conversation_id"
      - $ref: "#/components/parameters/message_id"
    delete:
      tags: ["messages"]
      summary: Delete message
      operationId: deleteMessage
      responses:
        "202":
          description: Message deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    
    put:
      tags: ["messages"]
      summary: React to message
      operationId: commentMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reaction:
                  type: string
      responses:
        "202":
          description: Reaction added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reaction"

  /conversations/{conversation_id}/messages/{message_id}/reactions/{reaction_id}:
    parameters:
      - $ref: "#/components/parameters/conversation_id"
      - $ref: "#/components/parameters/message_id"
      - $ref: "#/components/parameters/reaction_id"
    delete:
      tags: ["messages"]
      summary: Remove reaction
      operationId: uncommentMessage
      responses:
        "202":
          description: Reaction removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /conversations/{conversation_id}/name:
    parameters:
      - $ref: "#/components/parameters/conversation_id"
    put:
      tags: ["conversations"]
      summary: Update group name
      operationId: updateGroupName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 128
      responses:
        "200":
          description: Group name updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /conversations/{conversation_id}/photo:
    parameters:
      - $ref: "#/components/parameters/conversation_id"
    put:
      tags: ["conversations"]
      summary: Update group photo
      operationId: UpdateGroupPhoto
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Group photo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /conversations/{conversation_id}/users:
    parameters:
      - $ref: "#/components/parameters/conversation_id"
    put:
      tags: ["conversations"]
      summary: Add members to group
      operationId: addGroupMembers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: integer
      responses:
        "200":
          description: Members added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  schemas:
    User:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: Unique identifier of user
        username:
          type: string
          description: User's username
          minLength: 3
          maxLength: 64
        icon:
          type: string
          description: URL to user's profile photo

    Message:
      type: object
      required:
        - message_id
        - content
        - sender_id
        - conversation_id
      properties:
        message_id:
          type: integer
          description: Unique message identifier
        content:
          type: string
          description: Message content
        content_type:
          type: string
          enum: [text, image]
        sent_time:
          type: string
          format: date-time
        sender_id:
          type: integer
        conversation_id:
          type: integer
        replied_to:
          type: integer
        is_forwarded:
          type: boolean
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/Reaction"

    Conversation:
      type: object
      required:
        - conversation_id
        - is_group
      properties:
        conversation_id:
          type: integer
        name:
          type: string
          maxLength: 128
        is_group:
          type: boolean
        photo:
          type: string
        participants:
          type: array
          items:
            $ref: "#/components/schemas/User"

    Reaction:
      type: object
      required:
        - reaction_id
        - message_id
        - user_id
        - reaction
      properties:
        reaction_id:
          type: integer
        message_id:
          type: integer
        user_id:
          type: integer
        reaction:
          type: string

  parameters:
    conversation_id:
      name: conversation_id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1

    message_id:
      name: message_id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1

    reaction_id:
      name: reaction_id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

security:
  - bearerAuth: []